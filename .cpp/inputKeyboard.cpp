//==================================================================================================================
//
// キーボード処理[keyboard.cpp]
// Author : Seiya Takahashi
//
//==================================================================================================================
#include "inputKeyboard.h"

//==================================================================================================================
// 静的メンバ変数の初期化
//==================================================================================================================
BYTE CInputKeyboard::m_aKeyState[NUM_KEY_MAX] = {};					// キーボードの入力情報
BYTE CInputKeyboard::m_aKeyStateTngger[NUM_KEY_MAX] = {};			// キーボードトリガーの入力情報

//==================================================================================================================
// コンストラクタ
//==================================================================================================================
CInputKeyboard::CInputKeyboard()
{

}

//==================================================================================================================
// デストラクタ
//==================================================================================================================
CInputKeyboard::~CInputKeyboard()
{

}

//==================================================================================================================
// 初期化処理
//==================================================================================================================
HRESULT CInputKeyboard::Init(HINSTANCE hInstance, HWND hWnd)
{
	// インプットの初期化処理
	CInput::Init(hInstance, hWnd);

	// 入力デバイス（キーボード）の作成
	if (FAILED(m_pInput->CreateDevice(GUID_SysKeyboard, &m_pDevKeyboard, NULL)))
	{
		return E_FAIL;
	}

	// データフォーマットを設定
	if (FAILED(m_pDevKeyboard->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}

	// 協調モードを設定（フォアグラウンド＆非排他モード）
	if (FAILED(m_pDevKeyboard->SetCooperativeLevel(hWnd, (DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}

	// キーボードへのアクセス権を獲得(入力制御開始)
	m_pDevKeyboard->Acquire();

	// 値を返す
	return S_OK;
}

//==================================================================================================================
// 終了処理
//==================================================================================================================
void CInputKeyboard::Uninit(void)
{
	// インプットの終了処理
	CInput::Uninit();

	// 入力デバイス(キーボード)の開放
	if (m_pDevKeyboard != NULL)
	{
		// 入力デバイス（キーボード）の解放
		m_pDevKeyboard->Unacquire();		// キーボードへのアクセス権解放
		m_pDevKeyboard->Release();			// 入力デバイスの開放
		m_pDevKeyboard = NULL;				// NULLにする
	}
}

//==================================================================================================================
// 更新処理
//==================================================================================================================
void CInputKeyboard::Update(void)
{
	// キーボードの入力情報
	BYTE aKeyState[NUM_KEY_MAX];

	// デバイスからデータを取得
	if (SUCCEEDED(m_pDevKeyboard->GetDeviceState(sizeof(aKeyState), aKeyState)))
	{
		// 全てのキーをカウント
		for (int nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
		{
			// トリガー処理
			m_aKeyStateTngger[nCntKey] = (m_aKeyState[nCntKey] ^ aKeyState[nCntKey])&aKeyState[nCntKey];

			// キーブレス情報保存
			m_aKeyState[nCntKey] = aKeyState[nCntKey];
		}
	}
	else
	{// 取得できなかったとき
		// キーボードへのアクセス権取得
		m_pDevKeyboard->Acquire();
	}
}

//==================================================================================================================
// キーボードのプレス状態を取得
//==================================================================================================================
bool CInputKeyboard::GetKeyboardPress(int nKey)
{
	return (m_aKeyState[nKey] & 0x80) ? true : false;
}

//==================================================================================================================
// キーボードのトリガー状態を取得
//==================================================================================================================
bool CInputKeyboard::GetKeyboardTrigger(int nKey)
{
	return (m_aKeyStateTngger[nKey] & 0x80) ? true : false;
}