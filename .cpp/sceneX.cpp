//==================================================================================================================
//
// Xファイルの描画[sceneX.cpp]
// Author : Seiya Takahashi
//
//==================================================================================================================
#include "manager.h"
#include "sceneX.h"
#include "renderer.h"
#include "inputKeyboard.h"
#include "debugProc.h"

//==================================================================================================================
// 静的メンバ変数の初期化
//==================================================================================================================
CSceneX *CSceneX::m_pSceneX = NULL;				// CSceneX情報

//==================================================================================================================
// コンストラクタ
//==================================================================================================================
CSceneX::CSceneX(PRIORITY type) : CScene(type)
{

}

//==================================================================================================================
// デストラクタ
//==================================================================================================================
CSceneX::~CSceneX()
{

}

//==================================================================================================================
// 初期化処理
//==================================================================================================================
void CSceneX::Init(void)
{
	// 初期化
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);					// 位置
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);					// 移動量
	m_size = D3DXVECTOR3(1.0f, 1.0f, 1.0f);					// 大きさ
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);					// 回転
	m_vecAxis = D3DXVECTOR3(0.0f, 0.0f, 0.0f);				// 回転軸
	m_fValueRot = 0.0f;										// 回転角（回転量）
}

//==================================================================================================================
// 終了処理
//==================================================================================================================
void CSceneX::Uninit(void)
{

}


//==================================================================================================================
// 更新処理
//==================================================================================================================
void CSceneX::Update(void)
{
	// 位置取得
	m_pos = GetPos();

	// 回転取得
	m_rot = GetRot();

	// 移動量取得
	m_move = GetMove();

	// 回転軸取得
	m_vecAxis = GetVecAxis();

	// 回転量取得
	m_fValueRot = GetValueRot();

	// 回転情報が-D3DX_PIより小さくなったとき
	if (m_fValueRot < -D3DX_PI)
	{
		// 一周回転させる
		m_fValueRot += D3DX_PI * 2;
	}

	// 回転情報がD3DX_PIより大きくなったとき
	if (m_fValueRot > D3DX_PI)
	{
		// 一周戻す
		m_fValueRot -= D3DX_PI * 2;
	}

	// 回転軸設定
	SetVecAxis(m_vecAxis);

	// 回転量設定
	SetValueRot(m_fValueRot);

	// 位置設定
	SetPos(m_pos);

	// 回転設定
	SetRot(m_rot);

	// 移動量設定
	SetMove(m_move);
}

//==================================================================================================================
// 描画処理
//==================================================================================================================
void CSceneX::Draw(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();								// レンダラー情報取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();							// デバイスの取得
	D3DXMATRIX mtxRot, mtxTrans, mtxScale;										// 計算用マトリックス
	D3DXMATERIAL *pMat;															// 現在のマテリアル保存用
	D3DMATERIAL9 matDef;														// マテリアルデータへのポインタ

	// ワールドマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxWorld);

	// スケールを反映
	D3DXMatrixScaling(&mtxScale, m_size.x, m_size.y, m_size.z);
	D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxScale);

	// 回転を反映
	D3DXMatrixRotationYawPitchRoll(&mtxRot, m_rot.y, m_rot.x, m_rot.z);
	D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxRot);

	// 移動を反映
	D3DXMatrixTranslation(&mtxTrans, m_pos.x, m_pos.y, m_pos.z);
	D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxTrans);

	D3DXMATRIX mtxShadow;														// シャドウマトリックス
	D3DXPLANE planeField;														// 平面変数
	D3DXVECTOR4 vecLight;														// ライトの方向ベクトル
	D3DXVECTOR3 pos, normal;													// 影の位置、法線

	// ワールドマトリックスの設定
	pDevice->SetTransform(D3DTS_WORLD, &m_mtxWorld);

	// 現在のマテリアルを取得
	pDevice->GetMaterial(&matDef);

	// マテリアル情報に対するポインタを取得
	pMat = (D3DXMATERIAL*)m_pBuffMat->GetBufferPointer();

	// キャラクターの影描画
	for (int nCntMat = 0; nCntMat < (int)m_nNumMat; nCntMat++)
	{
		// マテリアルの設定
		pDevice->SetMaterial(&pMat[nCntMat].MatD3D);

		// 描画
		m_pMesh->DrawSubset(nCntMat);
	}

	// マテリアルをデフォルトに戻す
	pDevice->SetMaterial(&matDef);

	//テクスチャの設定
	pDevice->SetTexture(0, m_pTexture);

	//ポリゴン描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

	//テクスチャの設定
	pDevice->SetTexture(0, NULL);

}

//==================================================================================================================
// テクスチャを結合する
//==================================================================================================================
void CSceneX::BindTex(LPDIRECT3DTEXTURE9 tex)
{
	m_pTexture = tex;
}

//==================================================================================================================
// モデルを結合する
//==================================================================================================================
void CSceneX::BindModel(LPD3DXBUFFER pBuffMat, DWORD nNumMat, LPD3DXMESH pMesh)
{
	m_pBuffMat = pBuffMat;
	m_nNumMat = nNumMat;
	m_pMesh = pMesh;
}

//==================================================================================================================
// 位置設定
//==================================================================================================================
void CSceneX::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;
}

//==================================================================================================================
// 大きさ設定
//==================================================================================================================
void CSceneX::SetSize(D3DXVECTOR3 size)
{
	m_size = size;
}

//==================================================================================================================
// 移動量設定
//==================================================================================================================
void CSceneX::SetMove(D3DXVECTOR3 move)
{
	m_move = move;
}

//==================================================================================================================
// 回転設定
//==================================================================================================================
void CSceneX::SetRot(D3DXVECTOR3 rot)
{
	m_rot = rot;
}

//==================================================================================================================
// 回転軸設定
//==================================================================================================================
void CSceneX::SetVecAxis(D3DXVECTOR3 vecAxis)
{
	m_vecAxis = vecAxis;
}

//==================================================================================================================
// 回転角設定
//==================================================================================================================
void CSceneX::SetValueRot(float ValueRot)
{
	m_fValueRot = ValueRot;
}

//==================================================================================================================
// 矩形の当たり判定
//==================================================================================================================
bool CSceneX::SetCollisionBox(D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXVECTOR3 posOld)
{
	bool bHit = false;

	// モデルの横幅の範囲内にいるとき
	if (m_pos.x - size.x < posOld.x && m_pos.x + size.x > posOld.x)
	{
		// 下からモデルのぶつかった
		if (m_pos.z - size.z > posOld.z && m_pos.z - size.z <= pos.z)
		{
			// 当たったことにする
			bHit = true;
		}
	}

	return bHit;
}

//==================================================================================================================
// 生成処理
//==================================================================================================================
CSceneX *CSceneX::Create(void)
{
	// シーン動的に確保
	m_pSceneX = new CSceneX(CScene::PRIORITY_FIELD);

	// シーン初期化
	m_pSceneX->Init();

	// 値を返す
	return m_pSceneX;
}