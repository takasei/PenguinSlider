//==================================================================================================================
//
// 描画するものを管理する[scene.cpp]
// Author : Seiya Takahashi
//
//==================================================================================================================
#include "scene.h"
#include "renderer.h"

//==================================================================================================================
// 静的メンバ変数の初期化
//==================================================================================================================
CScene *CScene::m_pTop[PRIORITY_MAX] = {};		// 先頭オブジェクトのポインタ
CScene *CScene::m_pCur[PRIORITY_MAX] = {};		// 現在(最後尾)のオブジェクトのポインタ

//==================================================================================================================
// コンストラクタ
//==================================================================================================================
CScene::CScene(PRIORITY type)
{
	// 先頭オブジェクトが無い時
	if (m_pTop[type] == NULL)
	{
		m_pPrev = NULL;						// 前のオブジェクトのポインタ
		m_pTop[type] = this;				// 先頭オブジェクトのポインタをこれにする
	}
	m_pNext = NULL;							// 最後尾の次はNULL指定
	m_pPrev = m_pCur[type];					// 現在のオブジェクトを前のオブジェクトに代入

	// 最後尾があるとき
	if (m_pCur[type] != NULL)
	{
		m_pCur[type]->m_pNext = this;		// m_pNextを操作する
	}
	m_pCur[type] = this;					// 現在(最後尾)のオブジェクトのポインタをこれにする
	m_bDeth = false;						// 死亡フラグは立っていない状態にする
}

//==================================================================================================================
// デストラクタ
//==================================================================================================================
CScene::~CScene()
{

}

//==================================================================================================================
// 全ての更新
//==================================================================================================================
void CScene::UpdateAll(void)
{
	// 描画順番のfor文
	for (int nCnt = 0; nCnt < PRIORITY_MAX; nCnt++)
	{
		CScene *pScene = m_pTop[nCnt];					// 変数を作り初期化する
		while (pScene)									// pSceneがNULLになるまでエンドレス
		{
			CScene *pSceneNext = pScene->m_pNext;		// 次の情報格納
			pScene->Update();							// 今の情報の更新処理
			pScene = pSceneNext;						// pSceneに次の情報代入
		}
	}

	// 描画順番のfor文
	for (int nCnt = 0; nCnt < PRIORITY_MAX; nCnt++)
	{
		CScene *pScene = m_pTop[nCnt];					// 変数を作り初期化する
		while (pScene)									// pSceneがNULLになるまでエンドレス
		{
			CScene *pSceneNext = pScene->m_pNext;		// 次の情報格納
			pScene->Deleate(pScene, nCnt);				// 今の情報の破棄
			pScene = pSceneNext;						// pSceneに次の情報代入
		}
	}
}

//==================================================================================================================
// 全ての描画
//==================================================================================================================
void CScene::DrawAll(void)
{
	// 描画順番のfor文
	for (int nCnt = 0; nCnt < PRIORITY_MAX; nCnt++)
	{
		CScene *pScene = m_pTop[nCnt];				// 変数を作り初期化する
		while (pScene)								// pSceneがNULLになるまでエンドレス
		{
			CScene *pSceneNext = pScene->m_pNext;	// 次の情報格納	
			pScene->Draw();							// 今の情報の描画処理
			pScene = pSceneNext;					// pSceneに次の情報代入
		}
	}
}

//==================================================================================================================
// すべて破棄
//==================================================================================================================
void CScene::ReleaseAll(void)
{
	// 描画順番のfor文
	for (int nCnt = 0; nCnt < PRIORITY_MAX; nCnt++)
	{
		CScene *pScene = m_pTop[nCnt];				// 変数を作り初期化する
		while (pScene)								// pSceneがNULLになるまでエンドレス
		{
			CScene *pSceneNext = pScene->m_pNext;	// 次の情報に格納
			pScene->Release();						// 全てのものに死亡フラグ
			pScene->Deleate(pScene, nCnt);			// 破棄
			pScene = pSceneNext;					// pSceneに次の情報代入
		}
	}
}

//==================================================================================================================
// 死亡フラグを立てる
//==================================================================================================================
void CScene::Release(void)
{
	m_bDeth = true;				// 死亡フラグを立てる
}

//==================================================================================================================
// 取得
//==================================================================================================================
CScene *CScene::GetScene(PRIORITY nPriority, int nCntScene)
{
	CScene *pScene = m_pTop[nPriority];					// 変数を作り初期化する

	// 先頭からnCntScene分次のオブジェクトにポインタを渡す
	for (int nCnt = 0; nCnt < nCntScene; nCnt++)
	{
		CScene *pSceneNext = pScene->m_pNext;			// 次の情報格納	
		pScene = pSceneNext;							// pSceneに次の情報代入
	}

	return pScene;										// 値を返す
}

//==================================================================================================================
// 破棄
//==================================================================================================================
void CScene::Deleate(CScene *pScene, int type)
{
	// 死亡フラグが立っているとき
	if (m_bDeth)
	{
		// pSceneがあるとき
		if (pScene != NULL)
		{
			// 削除しようとする対象が先頭だったら
			if (pScene == m_pTop[type])
			{
				// 次のオブジェクトのポインタを先頭にする
				m_pTop[type] = m_pNext;
			}
			else
			{
				// 削除しようとする一個前の次のオブジェクト情報を今の次のオブジェクト情報に書き換える
				m_pPrev->m_pNext = m_pNext;
			}

			// 削除しようとする対象が最後尾だったら
			if (pScene == m_pCur[type])
			{// ぼくだけがいない街
				 // 削除しようとする一個前を最後尾にする
				m_pCur[type] = m_pPrev;
			}
			else
			{
				// 削除しようとする一個後の前のオブジェクト情報を今の前のオブジェクト情報に書き換える
				m_pNext->m_pPrev = m_pPrev;
			}

			// pSceneの終了処理
			pScene->Uninit();
			// 開放
			delete pScene;
			// NULLにする
			pScene = NULL;
		}
	}
}
