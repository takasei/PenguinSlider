//==================================================================================================================
//
// タイム処理[time.cpp]
// Author : Seiya Takahashi
//
//==================================================================================================================
#include "time.h"
#include "renderer.h"
#include "number.h"
#include "fade.h"
#include "game.h"
#include "logo.h"
#include "debugProc.h"
#include "player.h"

//==================================================================================================================
// マクロ定義
//==================================================================================================================
#define FADE_COUNT 180				// フェードが始まるカウント

//==================================================================================================================
// 静的メンバー変数の初期化
//==================================================================================================================
int CTime::m_nTime = NULL;			// タイム

//==================================================================================================================
//
// コンストラクタ
//
//==================================================================================================================
CTime::CTime(PRIORITY type = CScene::PRIORITY_UI) : CScene(type)
{
	// 初期化
	m_nTime = 0;					// タイム
}

//==================================================================================================================
//
// デストラクタ
//
//==================================================================================================================
CTime::~CTime()
{

}

//==================================================================================================================
// タイムの初期化
//==================================================================================================================
void CTime::Init(void)
{
	// 初期化
	m_dStartTime = (int)(START_TIMU * FRAME_TIMU);				// 始まるタイム
	m_nCountFade = 0;											// フェードするまでのカウント

	// 最大桁数までカウント
	for (int nCntScore = 0; nCntScore < MAX_TIME; nCntScore++)
	{
		// 生成処理
		m_apNumber[nCntScore] = CNumber::CreateObject();

		// 桁が0 又は 1のとき
		if (nCntScore == 0 || nCntScore == 1)
		{
			// 位置設定
			m_apNumber[nCntScore]->SetPos(D3DXVECTOR3(TIME_POS_X + TIME_INTERVAL_X * nCntScore,				// 位置X
														TIME_POS_Y,											// 位置Y
														0.0f),												// 位置Z
														NUMBER_SIZE_X, NUMBER_SIZE_Y);						// 大きさ
		}
		else if (nCntScore % 2 == 0)
		{// 桁が偶数のとき
			// 位置設定
			m_apNumber[nCntScore]->SetPos(D3DXVECTOR3(TIME_POS_X + TIME_INTERVAL_X * nCntScore + TIME_WIDTH * nCntScore / 2,	// 位置X
														TIME_POS_Y,																// 位置Y
														0.0f),																	// 位置Z
														NUMBER_SIZE_X, NUMBER_SIZE_Y);											// 大きさ
		}
		else
		{// それ以外
			// 位置設定
			m_apNumber[nCntScore]->SetPos(D3DXVECTOR3(TIME_POS_X + TIME_INTERVAL_X * nCntScore + TIME_WIDTH * ((nCntScore - 1) / 2),// 位置X
														TIME_POS_Y,																	// 位置Y
														0.0f),																		// 位置Z
														NUMBER_SIZE_X, NUMBER_SIZE_Y);												// 大きさ
		}
	}
}

//==================================================================================================================
// タイムの終了
//==================================================================================================================
void CTime::Uninit(void)
{
	// 最大桁数までカウント
	for (int nCntScore = 0; nCntScore < MAX_TIME; nCntScore++)
	{
		// 数字があるとき
		if (m_apNumber[nCntScore] != NULL)
		{
			// 数字の終了処理
			m_apNumber[nCntScore]->Uninit();

			// メモリ削除
			delete m_apNumber[nCntScore];

			// ポインタ用NULL
			m_apNumber[nCntScore] = nullptr;
		}
	}
}

//==================================================================================================================
// タイムの更新
//==================================================================================================================
void CTime::Update(void)
{
	// フェード取得
	CFade::FADE fade = CFade::GetFade();

	// プレイヤーの取得
	CPlayer *pPlayer = CGame::GetPlayer();

	// プレイヤーがいるとき
	if (pPlayer != NULL)
	{
		// ゴール判定取得
		bool bGoal = pPlayer->GetbGoal();

		// スタート判定取得
		bool bStart = pPlayer->GetStart();

		// 最大桁数までカウント
		for (int nCntScore = 0; nCntScore < MAX_TIME; nCntScore++)
		{
			// 数字があるとき
			if (m_apNumber[nCntScore] != NULL)
			{
				// 更新処理
				m_apNumber[nCntScore]->Update();
			}
		}

		// ゴールしたとき
		if (bGoal == true)
		{
			// フェードするまでのカウント加算
			m_nCountFade++;
		}
		// ゴールしていないとき
		else
		{
			// スタートしたとき
			if (bStart == true)
			{
				// タイム加算
				m_dStartTime++;
			}
		}

		// スタートしたとき
		if (bStart == true)
		{
			// 10分まで繰り上がるようにする
			for (int nCnt = 0; nCnt < 10; nCnt++)
			{
				// 10の位が60を超えたとき
				if (m_dStartTime == (int)((nCnt * 10000 + 6000) * FRAME_TIMU))
				{
					// 60秒になったら繰り上がり処理
					m_dStartTime = (int)((nCnt * 10000 + 10000) * FRAME_TIMU);
				}
			}

			// タイムが[0]より大きいとき
			if (m_dStartTime >= 0)
			{
				// タイムの設定
				SetTime(m_dStartTime);
			}
		}

		// フェードするまでのカウントが規定値を超えたとき
		if (m_nCountFade >= FADE_COUNT)
		{
			// フェードが何もない時
			if (fade == CFade::FADE_NONE)
			{
				// フェードの設定
				CFade::SetFade(CRenderer::MODE_RANKING);
			}
		}
	}
}

//==================================================================================================================
// タイムの描画
//==================================================================================================================
void CTime::Draw(void)
{
	// 最大桁数までカウント
	for (int nCntScore = 0; nCntScore < MAX_TIME; nCntScore++)
	{
		// 数字があるとき
		if (m_apNumber[nCntScore] != NULL)
		{
			// 描画処理
			m_apNumber[nCntScore]->Draw();
		}
	}
}

//==================================================================================================================
// タイムの生成
//==================================================================================================================
CTime *CTime::Create(void)
{
	// シーン動的に確保
	CTime *pTime = new CTime(CScene::PRIORITY_UI);

	// タイムの初期化
	pTime->Init();

	// 値を返す
	return pTime;
}

//==================================================================================================================
// タイムの変更
//==================================================================================================================
void CTime::SetTime(int nTime)
{
	int nNumber;

	// タイムをフレームで割る
	nTime = (int)(nTime / FRAME_TIMU + 1);

	// 最大桁数までカウント
	for (int nCount = 0; nCount < MAX_TIME; nCount++)
	{
		// 表示する数字計算
		nNumber = nTime % (int)powf(TIME_INTERVAL, (float)MAX_TIME - nCount) / (int)powf(TIME_INTERVAL, MAX_TIME - 1.0f - nCount);

		// 数字設定
		m_apNumber[nCount]->SetNumber(nNumber);
	}

	// タイムを代入
	m_nTime = nTime;
}

//==================================================================================================================
// 時間取得
//==================================================================================================================
int CTime::GetTime(void)
{
	return m_nTime;
}

//==================================================================================================================
// 情報取得
//==================================================================================================================
void CTime::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;
}